name: AI PR CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:

permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  # ========================================================
  # 1Ô∏è‚É£ CI: Tests + Security + Metrics
  # ========================================================
  build-test:
    runs-on: ubuntu-latest
    outputs:
      risk_score: ${{ steps.metrics.outputs.risk_score }}
      pipeline_success: ${{ steps.metrics.outputs.pipeline_success }}
      avg_build_time: ${{ steps.metrics.outputs.avg_build_time }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest bandit jq

      - name: Record start time
        id: start
        run: echo "start_time=$(date +%s)" >> $GITHUB_ENV

      - name: Run Pytest
        id: pytest
        continue-on-error: true
        run: |
          pytest --maxfail=1 --disable-warnings -q > pytest_results.txt
          echo "pytest_exit=$?" >> $GITHUB_ENV

      - name: Run Bandit
        id: bandit
        continue-on-error: true
        run: |
          bandit -r src > bandit_report.txt
          echo "bandit_exit=$?" >> $GITHUB_ENV

      - name: Collect Metrics
        id: metrics
        run: |
          end_time=$(date +%s)
          build_time=$((end_time - $start_time))
          build_min=$((build_time / 60))
          build_sec=$((build_time % 60))

          if [ "$pytest_exit" -eq 0 ] && [ "$bandit_exit" -eq 0 ]; then
            success=100
          elif [ "$pytest_exit" -eq 0 ] || [ "$bandit_exit" -eq 0 ]; then
            success=50
          else
            success=0
          fi

          issues=$(grep -c "Issue:" bandit_report.txt || true)
          tests_failed=$(grep -c "FAILED" pytest_results.txt || true)
          risk=$(( (issues * 5) + (tests_failed * 10) ))
          [ $risk -gt 100 ] && risk=100

          echo "risk_score=$risk" >> $GITHUB_OUTPUT
          echo "pipeline_success=$success" >> $GITHUB_OUTPUT
          echo "avg_build_time=${build_min}m${build_sec}s" >> $GITHUB_OUTPUT

  # ========================================================
  # 2Ô∏è‚É£ Comment metrics on PR
  # ========================================================
  comment-metrics:
    needs: build-test
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const risk = "${{needs.build-test.outputs.risk_score}}";
            const success = "${{needs.build-test.outputs.pipeline_success}}";
            const time = "${{needs.build-test.outputs.avg_build_time}}";
            const url = "https://icryptologic.github.io/AI-PR-AGENT-QODO-OS-WORKING/";
            const body = `
            ### üö¶ CI Metrics
            | Metric | Value |
            |--------|-------|
            | Risk Score | ${risk}/100 |
            | Pipeline Success | ${success}% |
            | Avg Build Time | ${time} |
            | Dashboard | [View Dashboard](${url}) |
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

  # ========================================================
  # 3Ô∏è‚É£ AI PR Agent Review
  # ========================================================
  pr-agent:
    needs: build-test
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    outputs:
      ai_approved: ${{ steps.set-approval.outputs.ai_approved }}
    steps:
      - name: Run PR Agent
        uses: Codium-ai/pr-agent@main
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Decide AI approval
        id: set-approval
        run: |
          if [[ "${{ needs.build-test.outputs.risk_score }}" -le 30 ]]; then
            echo "ai_approved=true" >> $GITHUB_OUTPUT
          else
            echo "ai_approved=false" >> $GITHUB_OUTPUT
          fi

  # ========================================================
  # 4Ô∏è‚É£ Auto-merge if low risk
  # ========================================================
  auto-merge:
    needs: [build-test, pr-agent]
    if: github.event_name == 'pull_request_target' && needs.pr-agent.outputs.ai_approved == 'true' && needs.build-test.outputs.pipeline_success == '100'
    runs-on: ubuntu-latest
    steps:
      - uses: pascalgn/automerge-action@v0.16.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========================================================
  # 5Ô∏è‚É£ Build Dashboard (JSON + HTML) and Deploy Pages
  # ========================================================
  publish-dashboard:
    needs: [build-test, pr-agent, auto-merge]
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create JSON + HTML dashboard
        run: |
          mkdir -p reports
          cat <<EOF > reports/pr_summary_${{ github.event.pull_request.number }}.json
          {
            "pr_number": "${{ github.event.pull_request.number }}",
            "title": "${{ github.event.pull_request.title }}",
            "risk_score": "${{ needs.build-test.outputs.risk_score }}",
            "pipeline_success": "${{ needs.build-test.outputs.pipeline_success }}",
            "avg_build_time": "${{ needs.build-test.outputs.avg_build_time }}",
            "ai_approved": "${{ needs.pr-agent.outputs.ai_approved }}"
          }
          EOF

          cat <<HTML > reports/index.html
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <title>PR Dashboard</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              table { border-collapse: collapse; width: 60%; }
              th, td { padding: 8px; border: 1px solid #ccc; }
              th { background: #f5f5f5; }
            </style>
          </head>
          <body>
            <h1>üìä Pull Request Dashboard</h1>
            <table>
              <tr><th>PR #</th><td>${{ github.event.pull_request.number }}</td></tr>
              <tr><th>Title</th><td>${{ github.event.pull_request.title }}</td></tr>
              <tr><th>Risk Score</th><td>${{ needs.build-test.outputs.risk_score }}/100</td></tr>
              <tr><th>Pipeline Success</th><td>${{ needs.build-test.outputs.pipeline_success }}%</td></tr>
              <tr><th>Build Time</th><td>${{ needs.build-test.outputs.avg_build_time }}</td></tr>
              <tr><th>AI Approved</th><td>${{ needs.pr-agent.outputs.ai_approved }}</td></tr>
            </table>
          </body>
          </html>
          HTML

      - name: Commit & Push report
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -B reports
          git add reports/
          git commit -m "Add dashboard for PR #${{ github.event.pull_request.number }}"
          git push origin reports --force

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports

  # ========================================================
  # 6Ô∏è‚É£ Deploy GitHub Pages
  # ========================================================
  deploy-pages:
    needs: publish-dashboard
    runs-on: ubuntu-latest
    steps:
      - uses: actions/configure-pages@v5
      - uses: actions/deploy-pages@v4
#html
